import os

def gather_files(root_folder, extensions, exclude_dirs, exclude_files, exclude_patterns):
    output_file = "AllProjectFiles_Cleaned.txt"
    files_added = []
    with open(output_file, "w", encoding="utf-8") as out:
        for subdir, dirs, files in os.walk(root_folder):
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π

            # –í–∏–∫–ª—é—á–∞—î–º–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏
            if any(excluded in subdir for excluded in exclude_dirs):
                continue

            for file in files:
                file_lower = file.lower()
                file_path = os.path.join(subdir, file)

                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—É

                # –í–∏–∫–ª—é—á–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ñ–∞–π–ª–∏
                if file_path in exclude_files:
                    continue

                # –í–∏–∫–ª—é—á–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏ (–∞–ª–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ app.css!)
                if any(file_lower.endswith(pattern) for pattern in exclude_patterns) and "app.css" not in file_lower:
                    continue

                if any(file_lower.endswith(ext) for ext in extensions):
                    try:
                        with open(file_path, "r", encoding="utf-8") as f:
                            out.write(f"--- File: {file} (Path: {file_path}) ---\n\n")
                            out.write(f.read() + "\n\n")
                            files_added.append(file_path)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {file}: {e}")

    print(f"\n‚úÖ –ó—ñ–±—Ä–∞–Ω–æ {len(files_added)} —Ñ–∞–π–ª—ñ–≤ —É '{output_file}'")
    for path in files_added:
        print(f"üìÑ –î–æ–¥–∞–Ω–æ: {path}")

if __name__ == "__main__":
    needed_extensions = [
        ".cs", ".razor", ".cshtml", ".json", ".html", ".xml", ".js", ".css",
        ".ts", ".yml", ".yaml", ".sh", ".ps1", ".md", ".conf", ""
    ]

    # –î–æ–¥–∞—î–º–æ "Migrations" –¥–æ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫, —è–∫—ñ —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è
    exclude_dirs = [
        "bin", "obj", "wwwroot/_framework", "scopedcss", "node_modules", ".vs", ".git", "Migrations"
    ]

    exclude_files = [
        ".git/ms-persist.xml",
        ".vs/Prymara/v17/DocumentLayout.backup.json",
        ".vs/Prymara/v17/DocumentLayout.json",
        ".vs/Prymara.API/v17/DocumentLayout.backup.json",
        ".vs/Prymara.API/v17/DocumentLayout.json",
        "Prymara.Client/wwwroot/css/bootstrap/bootstrap.min.css"
    ]

    exclude_patterns = [
        ".min.css",  # –í–∏–∫–ª—é—á–∞—î –≤—Å—ñ –º—ñ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω—ñ CSS —Ñ–∞–π–ª–∏ (–∫—Ä—ñ–º app.css)
        ".min.js", ".txt", ".dockerignore", ".gitattributes", ".gitignore", ".sln", ".user", ".csproj", ".map", ".py"
    ]

    gather_files(".", needed_extensions, exclude_dirs, exclude_files, exclude_patterns)

    # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º –∫–æ–Ω—Å–æ–ª—ñ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –≤–∏–π—Ç–∏...")
