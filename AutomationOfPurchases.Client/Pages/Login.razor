@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

@using System.Net.Http.Json

<style>
    .login-container {
        /* Виставляємо ширину та відступи, щоб блок був по центру екрану */
        max-width: 400px;
        margin: 10vh auto; /* відступ зверху, щоб блок був приблизно по центру */
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 2rem;
        background-color: #fff;
    }

    .login-title {
        text-align: center;
        margin-bottom: 1rem;
    }
</style>

<div class="login-container">
    <h3 class="login-title">Вхід до системи</h3>

    <EditForm Model="@credentials" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Логін</label>
            <InputText class="form-control" @bind-Value="@credentials.UserName" />
        </div>

        <div class="mb-3">
            <label class="form-label">Пароль</label>
            <InputText class="form-control" @bind-Value="@credentials.Password" type="password" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Увійти</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </EditForm>
</div>

@code {
    private LoginRequest credentials = new();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        errorMessage = null;

        try
        {
            // Відправляємо логін-запит на API (припустимо: POST /api/auth/login)
            var response = await Http.PostAsJsonAsync("api/auth/login", credentials);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result is not null && !string.IsNullOrWhiteSpace(result.Token))
                {
                    // Зберігаємо токен у localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                    // Повідомляємо провайдер, що користувач тепер авторизований
                    if (AuthStateProvider is Client.Auth.CustomAuthStateProvider customProvider)
                    {
                        customProvider.NotifyUserAuthenticationStateChanged();
                    }

                    // Перенаправляємося на головну (або на /notifications)
                    Navigation.NavigateTo("/", true);
                }
                else
                {
                    errorMessage = "Сервер не повернув дійсний токен.";
                }
            }
            else
            {
                errorMessage = "Неправильний логін або пароль.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    // Класи, потрібні для JSON-серіалізації
    class LoginRequest
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
