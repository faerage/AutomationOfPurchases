@page "/eco-analytics"
@using System.Globalization
@using System.Net.Http.Json
@using AutomationOfPurchases.Shared.DTOs
@inject HttpClient Http
@inject IJSRuntime JS
@implements IAsyncDisposable

<h2>Аналітика ТМЦ</h2>

<button class="btn btn-secondary mb-3" @onclick="ToggleFilters">
    @(showFilters ? "Сховати фільтри" : "Показати фільтри")
</button>

@if (showFilters)
{
    <div class="card p-3 mb-3">

        <input class="form-control mb-2"
               placeholder="Пошук за назвою…"
               value="@filterName"
               @oninput="OnNameFilterChanged" />

        <div class="form-check form-switch">
            <input id="enoughData"
                   class="form-check-input"
                   type="checkbox"
                   checked="@filterEnoughData"
                   @onchange="OnEnoughDataChanged" />
            <label class="form-check-label" for="enoughData">
                Показати ТМЦ, для яких зібрано достатньо даних
            </label>
        </div>
    </div>
}

@if (items is null)
{
    <p>Завантаження…</p>
}
else if (filteredItems.Any())
{
    <div class="list-group">
        @foreach (var item in filteredItems)
        {
            <a href="javascript:void(0);"
               class="list-group-item list-group-item-action d-flex
                      justify-content-between align-items-center"
               @onclick="() => ToggleItem(item.ItemId)">
                <span>@item.ItemName (@item.StorageUnit)</span>
                <span class="badge bg-secondary">
                    @(expandedItems.Contains(item.ItemId) ? "▲" : "▼")
                </span>
            </a>

            @if (expandedItems.Contains(item.ItemId))
            {
                <div class="border p-3 mb-3">

                    @* ── є дані — рендеримо графіки ── *@
                    @if (demoItemsWithData.Contains(item.ItemId))
                    {
                        <div class="mb-4 border p-2">
                            <a2>Орієнтовна кількість ТМЦ що будуть замовлені в наступному місяці - @demoForecast[item.ItemId] (@item.StorageUnit)</a2>
                        </div>
                        <div class="mb-4 border p-2">
                            <canvas id="statusChart_@item.ItemId" height="240"></canvas>
                        </div>

                        <div class="mb-4 border p-2">
                            <canvas id="decChart_@item.ItemId" height="240"></canvas>
                        </div>
                    }
                    @* ── даних нема — показуємо повідомлення ── *@
                    else
                    {
                        <p class="text-muted m-0">
                            Не&nbsp;вистачає даних&nbsp;для&nbsp;проведення&nbsp;аналізу.
                        </p>
                    }
                </div>
            }
        }
    </div>
}
else
{
    <p>Нічого не знайдено.</p>
}

@code {
    /* ---------- дані, стан ---------- */

    private List<ItemDTO>? items;

    private bool showFilters = false;
    private bool filterEnoughData = true;
    private string filterName = string.Empty;

    private readonly HashSet<int> expandedItems = new();
    private readonly HashSet<int> rendered = new();

    private IJSObjectReference? module;

    /* ---------- демо‑дані ---------- */

    // останні 12 місяців
    private readonly string[] monthLabels =
        Enumerable.Range(0, 12)
                  .Select(i => DateTime
                                 .Now
                                 .AddMonths(-11 + i)
                                 .ToString("MMM yyyy",
                                     CultureInfo.GetCultureInfo("uk-UA")))
                  .ToArray();

    private readonly int[] demoItemIds = { 1, 2 };

    // 1) затверджені / відхилені
    private readonly Dictionary<int, int[]> demoApproved = new()
        {
            [1] = new[] { 4, 6, 3, 5, 5, 2, 6, 1, 4, 6, 3, 5 },
            [2] = new[] { 1, 2, 1, 3, 1, 2, 1, 4, 1, 1, 2, 1 }
        };

    private readonly Dictionary<int, int[]> demoRejected = new()
        {
            [1] = new[] { 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1 },
            [2] = new[] { 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0 }
        };

    // 2) рішення – кількість
    private readonly Dictionary<int, (int[] WarehouseQty, int[] PurchaseQty)> demoDecisions = new()
        {
            [1] = (
                    new[] { 20, 30, 10, 25, 30, 15, 35, 8, 18, 28, 14, 22 },
                    new[] { 12, 25, 18, 20, 22, 14, 28, 12, 24, 29, 19, 25 }
                ),
            [2] = (
                    new[] { 10, 12, 0, 9, 5, 6, 4, 10, 8, 2, 7, 3 },
                    new[] { 8, 15, 12, 14, 10, 11, 9, 16, 10, 8, 13, 9 }
                )
        };
    // ↳ прогноз на наступний місяць
    private readonly Dictionary<int, int> demoForecast = new()
        {
            [1] = 43,   // ItemId == 1
            [2] = 15    // ItemId == 2
        };

    private readonly HashSet<int> demoItemsWithData;

    public EcoAnalytics() => demoItemsWithData = demoItemIds.ToHashSet();

    /* ---------- життєвий цикл ---------- */

    protected override async Task OnInitializedAsync()
        => items = await Http.GetFromJsonAsync<List<ItemDTO>>("api/item");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (items is null) return;

        module ??= await JS.InvokeAsync<IJSObjectReference>(
                        "import", "/js/ecoAnalytics.js");

        foreach (var id in expandedItems)
        {
            if (!demoItemsWithData.Contains(id) || rendered.Contains(id))
                continue;

            var item = items.First(i => i.ItemId == id);

            await module.InvokeVoidAsync("drawCharts",
                id,
                monthLabels,
                demoApproved[id],
                demoRejected[id],
                demoDecisions[id].WarehouseQty,
                demoDecisions[id].PurchaseQty,
                item.StorageUnit);

            rendered.Add(id);
        }
    }

    /* ---------- обробники UI ---------- */

    private void ToggleFilters() => showFilters = !showFilters;

    private void OnEnoughDataChanged(ChangeEventArgs e)
        => filterEnoughData = (bool)e.Value!;

    private void OnNameFilterChanged(ChangeEventArgs e)
    {
        filterName = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private async Task ToggleItem(int id)
    {
        if (expandedItems.Contains(id))
        {
            expandedItems.Remove(id);
            rendered.Remove(id);

            if (module is not null)
                await module.InvokeVoidAsync("disposeCharts", id);
        }
        else
        {
            expandedItems.Add(id);
        }
    }

    /* ---------- фільтри ---------- */

    private IEnumerable<ItemDTO> filteredItems =>
        items is null
            ? Enumerable.Empty<ItemDTO>()
            : items.Where(i =>
                   (!filterEnoughData || demoItemsWithData.Contains(i.ItemId)) &&
                   (string.IsNullOrWhiteSpace(filterName) ||
                    i.ItemName.Contains(filterName, StringComparison.OrdinalIgnoreCase)));

    /* ---------- очищення ---------- */

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
            await module.DisposeAsync();
    }
}
