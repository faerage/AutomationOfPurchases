@page "/dept-requests"
@attribute [Authorize(Roles = "DepartmentHead")]
@inject HttpClient Http
@inject NavigationManager Navigation

@using AutomationOfPurchases.Shared.DTOs
@using AutomationOfPurchases.Shared.Enums
@using AutomationOfPurchases.Shared.Localization

<h3>Заявки мого департаменту</h3>

<!-- *** MOD *** кнопка показу / ховання блоку фільтрів -->
<button class="btn btn-secondary mb-3"
        @onclick="ToggleFilters">
    @(showFilters ? "Сховати фільтри" : "Показати фільтри")
</button>

@if (showFilters)            
{
    <!-- Усі поля фільтрації залишилися без змін -->
    <div class="form-check form-switch mb-3">
        <input class="form-check-input" type="checkbox" role="switch"
               id="showReviewedSwitch"
               @bind="showReviewedRequests" />
        <label class="form-check-label" for="showReviewedSwitch">
            Показати розглянуті
        </label>
    </div>

    <div class="mb-3">
        <label class="form-label">Пошук за назвою заявки:</label>
        <input type="text" class="form-control" @bind="searchTitle"
               placeholder="Введіть фрагмент назви" />
    </div>

    <div class="mb-3">
        <label class="form-label">Пошук за автором заявки:</label>
        <input type="text" class="form-control" @bind="searchAuthor"
               placeholder="Введіть фрагмент імені автора" />
    </div>

    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <label class="form-label">Дата від:</label>
            <InputDate class="form-control" @bind-Value="filterFromDate" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Дата до:</label>
            <InputDate class="form-control" @bind-Value="filterToDate" />
        </div>
    </div>
}

@if (requests == null)
{
    <p>Завантаження...</p>
}
else
{
    var filteredRequests = GetFilteredRequests();
    if (!filteredRequests.Any())
    {
        <p>Немає заявок для відображення</p>
    }
    else
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Назва заявки</th>
                    <th>Автор заявки</th>
                    <th>Статус заявки</th>
                    <th>Дата створення</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in filteredRequests)
                {
                    <tr>
                        <td>@r.Title</td>
                        <td>@r.OrderedByFullName</td>
                        <td>@RequestStatusLocalizer.Localize(r.Status)</td>
                        <td>@r.CreationDate.ToLocalTime():dd.MM.yyyy</td>
                        <td>
                            <button class="btn btn-primary btn-sm"
                                    @onclick="() => ViewRequest(r.RequestId)">
                                Переглянути заявку
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    private List<RequestDTO>? requests;
    private string? message;

    private bool showFilters = false;          // *** MOD ***
    private bool showReviewedRequests = false;
    private string? searchTitle;
    private string? searchAuthor;
    private DateTime? filterFromDate;
    private DateTime? filterToDate;

    protected override async Task OnInitializedAsync() => await LoadRequestsAsync();

    private async Task LoadRequestsAsync()
    {
        try
        {
            requests = await Http.GetFromJsonAsync<List<RequestDTO>>("api/request/department");
        }
        catch (Exception ex)
        {
            message = $"Помилка завантаження: {ex.Message}";
        }
    }

    private void ToggleFilters() => showFilters = !showFilters;   // *** MOD ***

    private void ViewRequest(int requestId) =>
        Navigation.NavigateTo($"/request-details/{requestId}");

    private IEnumerable<RequestDTO> GetFilteredRequests()
    {
        if (requests == null) return Enumerable.Empty<RequestDTO>();

        var query = requests.AsEnumerable();

        query = showReviewedRequests
            ? query.Where(r => r.Status != RequestStatus.Draft)
            : query.Where(r => r.Status == RequestStatus.PendingDepartmentHead);

        if (!string.IsNullOrWhiteSpace(searchTitle))
            query = query.Where(r => (r.Title ?? "")
                .Contains(searchTitle, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrWhiteSpace(searchAuthor))
            query = query.Where(r => (r.OrderedByFullName ?? "")
                .Contains(searchAuthor, StringComparison.OrdinalIgnoreCase));

        if (filterFromDate.HasValue)
            query = query.Where(r => r.CreationDate.Date >= filterFromDate.Value.Date);

        if (filterToDate.HasValue)
            query = query.Where(r => r.CreationDate.Date <= filterToDate.Value.Date);

        return query.OrderByDescending(r => r.CreationDate);
    }
}
